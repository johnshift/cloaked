name: API
on:
  push:
    branches: [api]

jobs:

  api:
    name: API Build + Tests 
    runs-on: ubuntu-latest
    env:
      DB_NAME: test
      DB_USER: dev1
      DB_PASS: pass1
    steps:
      - name: Checkout API Branch
        uses: actions/checkout@v2
        with:
          ref: 'api'

      - name: Setup PostgreSQL
        run: |
          sudo service postgresql start
          sudo -u postgres psql -c "CREATE DATABASE ${{ env.DB_NAME }}"
          sudo -u postgres psql -c "CREATE USER ${{ env.DB_USER }} WITH ENCRYPTED PASSWORD '${{ env.DB_PASS }}'"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ env.DB_NAME }} TO ${{ env.DB_USER }}"          

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
          cache: 'maven'

      # - name: Run Unit + Integration Tests
      #   working-directory: ./api
      #   run: 'mvn clean install'

  merge:
    name: Merge API to dev
    needs: [api]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Dev Branch
        uses: actions/checkout@v2
        with:
          ref: 'dev'

      - name: Reset dev branch
        run: |
          git fetch origin api:api
          git reset --hard api --

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          branch: i-dont-know-wtf
          token: ${{ secrets.PAT }}


# name: API
# on:
#   push:
#     branches: [api]

# jobs:

#   unit-test:
#     name: API Unit Tests 
#     runs-on: ubuntu-latest
#     env:
#       DB_NAME: test
#       DB_USER: dev1
#       DB_PASS: pass1
#     steps:
#       - name: Checkout API Branch
#         uses: actions/checkout@v2
#         with:
#           ref: 'api'
#       - name: Setup PostgreSQL
#         run: |
#           sudo service postgresql start
#           sudo -u postgres psql -c "CREATE DATABASE ${{ env.DB_NAME }}"
#           sudo -u postgres psql -c "CREATE USER ${{ env.DB_USER }} WITH ENCRYPTED PASSWORD '${{ env.DB_PASS }}'"
#           sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ env.DB_NAME }} TO ${{ env.DB_USER }}"          
#       - name: Setup Java
#         uses: actions/setup-java@v2
#         with:
#           distribution: 'adopt'
#           java-version: '11'
#           cache: 'maven'
#       - name: Run Unit Test
#         working-directory: ./api
#         run: 'mvn clean install'
#       - name: Cancel workflow on failure
#         if: failure()
#         uses: andymckay/cancel-action@0.2

#   integration-test:
#     name: API Integration Tests 
#     runs-on: ubuntu-latest
#     env:
#       DB_NAME: test
#       DB_USER: dev1
#       DB_PASS: pass1
#     steps:
#       - name: Checkout API Branch
#         uses: actions/checkout@v2
#         with:
#           ref: 'api'
#       - name: Setup PostgreSQL
#         run: |
#           sudo service postgresql start
#           sudo -u postgres psql -c "CREATE DATABASE ${{ env.DB_NAME }}"
#           sudo -u postgres psql -c "CREATE USER ${{ env.DB_USER }} WITH ENCRYPTED PASSWORD '${{ env.DB_PASS }}'"
#           sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ env.DB_NAME }} TO ${{ env.DB_USER }}"          
#       - name: Setup Java
#         uses: actions/setup-java@v2
#         with:
#           distribution: 'adopt'
#           java-version: '11'
#           cache: 'maven'
#       - name: Run Unit Test
#         working-directory: ./api
#         run: 'mvn clean failsafe:integration-test'
#       - name: Cancel workflow on failure
#         if: failure()
#         uses: andymckay/cancel-action@0.2

#   merge-api:
#     name: Merge api -> dev
#     needs: [unit-test, integration-test]
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@master
#       - name: Merge api -> dev
#         uses: devmasx/merge-branch@master
#         with:
#           type: now
#           from_branch: api
#           target_branch: dev
#           github_token: ${{ secrets.PAT }}