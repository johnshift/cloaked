name: API
on:
  push:
    branches: [api]
    
jobs:
      
  api:
    if: github.event_name == 'push'
    name: API Build + Tests 
    runs-on: ubuntu-latest
    env:
      DB_NAME: test
      DB_USER: dev1
      DB_PASS: pass1
    steps:
      - name: Checkout API Branch
        uses: actions/checkout@v2
        with:
          ref: 'api'

      # - name: Setup PostgreSQL
      #   run: |
      #     sudo service postgresql start
      #     sudo -u postgres psql -c "CREATE DATABASE ${{ env.DB_NAME }}"
      #     sudo -u postgres psql -c "CREATE USER ${{ env.DB_USER }} WITH ENCRYPTED PASSWORD '${{ env.DB_PASS }}'"
      #     sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ env.DB_NAME }} TO ${{ env.DB_USER }}"          

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
          cache: 'maven'

      # - name: Run Unit + Integration Tests
      #   working-directory: ./api
      #   run: 'mvn clean install'

      - name: pull-request
        uses: repo-sync/pull-request@v2
        id: create-pr
        with:
          destination_branch: "dev"                      # If blank, default: master
          pr_title: "Pulling ${{ github.ref }} into dev" # Title of pull request
          pr_body: ":crown: *An automated PR*"              # Full markdown support, requires pr_title to be set
          pr_label: "automerge"                               # Comma-separated list (no spaces)
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: echo pr_number
        run: echo pr_number = ${{ steps.create-pr.outputs.pr_number }}

      - name: persist pr number
        uses: aaimio/set-persistent-value@v1
        with:
          key: pr_number
          value: ${{ steps.create-pr.outputs.pr_number }}
          access_token: ${{ secrets.PERSISTENT_VALUE_ACCESS_TOKEN }}
      
# name: API
# on:
#   push:
#     branches: [api]

# jobs:

#   unit-test:
#     name: API Unit Tests 
#     runs-on: ubuntu-latest
#     env:
#       DB_NAME: test
#       DB_USER: dev1
#       DB_PASS: pass1
#     steps:
#       - name: Checkout API Branch
#         uses: actions/checkout@v2
#         with:
#           ref: 'api'
#       - name: Setup PostgreSQL
#         run: |
#           sudo service postgresql start
#           sudo -u postgres psql -c "CREATE DATABASE ${{ env.DB_NAME }}"
#           sudo -u postgres psql -c "CREATE USER ${{ env.DB_USER }} WITH ENCRYPTED PASSWORD '${{ env.DB_PASS }}'"
#           sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ env.DB_NAME }} TO ${{ env.DB_USER }}"          
#       - name: Setup Java
#         uses: actions/setup-java@v2
#         with:
#           distribution: 'adopt'
#           java-version: '11'
#           cache: 'maven'
#       - name: Run Unit Test
#         working-directory: ./api
#         run: 'mvn clean install'
#       - name: Cancel workflow on failure
#         if: failure()
#         uses: andymckay/cancel-action@0.2

#   integration-test:
#     name: API Integration Tests 
#     runs-on: ubuntu-latest
#     env:
#       DB_NAME: test
#       DB_USER: dev1
#       DB_PASS: pass1
#     steps:
#       - name: Checkout API Branch
#         uses: actions/checkout@v2
#         with:
#           ref: 'api'
#       - name: Setup PostgreSQL
#         run: |
#           sudo service postgresql start
#           sudo -u postgres psql -c "CREATE DATABASE ${{ env.DB_NAME }}"
#           sudo -u postgres psql -c "CREATE USER ${{ env.DB_USER }} WITH ENCRYPTED PASSWORD '${{ env.DB_PASS }}'"
#           sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ env.DB_NAME }} TO ${{ env.DB_USER }}"          
#       - name: Setup Java
#         uses: actions/setup-java@v2
#         with:
#           distribution: 'adopt'
#           java-version: '11'
#           cache: 'maven'
#       - name: Run Unit Test
#         working-directory: ./api
#         run: 'mvn clean failsafe:integration-test'
#       - name: Cancel workflow on failure
#         if: failure()
#         uses: andymckay/cancel-action@0.2

#   merge-api:
#     name: Merge api -> dev
#     needs: [unit-test, integration-test]
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@master
#       - name: Merge api -> dev
#         uses: devmasx/merge-branch@master
#         with:
#           type: now
#           from_branch: api
#           target_branch: dev
#           github_token: ${{ secrets.PAT }}